Q: What happens when you initialize a repository? Why do you need to do it?

A: When you initialize a repository, git creates some hidden metadata in a file
named .git this is used for storing the snapshots of your repository I assume.
If you don't have a repository, you don't have the git functionalities.

Q: How is the staging area different from the working directory and the
repository? What value do you think it offers?

A: The staging area contains files that you want to include in one commit.
It is kind of a tool for your working memory. I think it is clever to be able
to move the files you want to commit at once in a separate place. And actually,
this seems to be a more efficient way to create a not-all-inclusive commit than
any others that I could think about.

Q: How can you use the staging area to make sure you have one commit per logical
change?

A: You can add the changes you have made to the staging area, then compare the
staging are with the last commit you have done with the command git diff --staged.
Then you will notice if they make a logical entity and if you want or don't want
to commit them at once.

Q: What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

A: I might want to try something new and experimental but keep an old working
version too. Or I might want to make an easier or harder version of a game. Or I
might want to try how my project looks like while using another language.

Q: How do the diagrams help you visualize the branch structure?

A: The diagrams help me a lot when I have to understand what a branch is and
which of them are reachable. Even though the name in itself is a good tips about
the way you can think about branches, the diagram makes things even more clear.
It makes you think about an actual tree which makes memorization way easier.
